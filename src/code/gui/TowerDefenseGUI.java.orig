package code.gui;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

import code.game.Board;
import code.game.GameEngine;
/**
 * TowerDefenseGui is the Jframe that represents one complete copy of the entire game.
 * Creating one pops up the game window and creating multiple creates multiple completely seperate
 * games. Hence it is not a singleton.
 * @author Andrew Elenbogen, Aidan Carroll, Alex Calamaro, Jerry Wei
 * @version May 26, 2014
 */
public class TowerDefenseGUI extends JFrame
{
	private GameEngine engine;
	/**
	 * Sets up the GUI using a gridbag layout.
	 */
	public TowerDefenseGUI() 
	{
		super("Road to Graduation");
		engine=GameEngine.getEngine();
		engine.start();
		initGui();
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setResizable(false);
		this.pack();
		this.setVisible(true);
	}
	/**
	 * A private helper method used to move some of the clutter out of the constructor.
	 */
	private void initGui()
	{
		this.setLayout(new GridBagLayout());
		GridBagConstraints c=new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 0;
		c.gridy = 0;

		this.add(Board.getBoard(), c);

		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridx = 1;
		c.gridy = 0;

		this.add(new MenuPanel(), c);
		this.pack();
	}
	/**
	 * Creates an instance of the game.
	 * @param args Command line arguments, does nothing at present.
	 */
	public static void main(String[] args)
	{
		TowerDefenseGUI gui=new TowerDefenseGUI();
	}
	/**
	 * Loads the given image, scales it and returns it.
	 * @param path The path to the file that contains the image
	 * @param desiredX The desired X size of the image in pixels.
	 * @param desiredY The desired Y size of the image in pixels.  
	 * @return A scaled Image object holding the image located at the given path.
	 */
	public static Image loadImage(String path, int desiredX, int desiredY)
	{
		Image image=null;
		try
		{
			image=ImageIO.read(new File(path));
		}
		catch(IOException e)
		{
			System.out.println("Fatal Error: Failed to load image: "+path);
			System.exit(1);
		}
		return image.getScaledInstance(desiredX, desiredY, Image.SCALE_SMOOTH);
	}
	
}
